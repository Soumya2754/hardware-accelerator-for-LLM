$date
   Tue Apr 16 00:17:39 2024
$end
$version
  2019.1
$end
$timescale
  1ps
$end
$scope module operator_core $end
$var reg 16 ! num1 [15:0] $end
$var reg 16 " num2 [15:0] $end
$var wire 16 & floA [15:0] $end
$var wire 16 % floM [15:0] $end
$var wire 16 # fixA [15:0] $end
$var wire 16 $ fixM [15:0] $end
$var wire 4 ' overflow [3:0] $end
$var wire 8 ( num1_int [7:0] $end
$var wire 8 ) num1_flo [7:0] $end
$var wire 8 * num2_int [7:0] $end
$var wire 8 + num2_flo [7:0] $end
$var wire 8 8 fixA_int [7:0] $end
$var wire 8 9 fixA_flo [7:0] $end
$var wire 8 : fixM_int [7:0] $end
$var wire 8 ; fixM_flo [7:0] $end
$var wire 1 , num1_sign $end
$var wire 1 / num2_sign $end
$var wire 1 5 floM_sign $end
$var wire 1 2 floA_sign $end
$var wire 5 - num1_exp [4:0] $end
$var wire 5 0 num2_exp [4:0] $end
$var wire 5 6 floM_exp [4:0] $end
$var wire 5 3 floA_exp [4:0] $end
$var wire 10 . num1_frac [9:0] $end
$var wire 10 1 num2_frac [9:0] $end
$var wire 10 7 floM_frac [9:0] $end
$var wire 10 4 floA_frac [9:0] $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11011 !
b101010 "
b1000101 #
b100 $
b0 %
b1000101 &
b0 '
b0 (
b11011 )
b0 *
b101010 +
0,
b0 -
b11011 .
0/
b0 0
b101010 1
02
b0 3
b1000101 4
05
b0 6
b0 7
b0 8
b1000101 9
b0 :
b100 ;
$end
#250000
b1000110001 !
b10011110 "
b1011001111 #
b101011010 $
b1011001111 &
b0 '
b10 (
b110001 )
b0 *
b10011110 +
0,
b0 -
b1000110001 .
0/
b0 0
b10011110 1
02
b0 3
b1011001111 4
b10 8
b11001111 9
b1 :
b1011010 ;
#500000
b1010101010001110 !
b101011100100110 "
b110110100 #
b111110010011 $
b1100010111011011 %
b101011100100110 &
b11 '
b10101010 (
b10001110 )
b1010111 *
b100110 +
1,
b1010 -
b1010001110 .
0/
b10101 0
b1100100110 1
02
b10101 3
b1100100110 4
15
b10001 6
b111011011 7
b1 8
b10110100 9
b1111 :
b10010011 ;
#750000
b1111110110111010 !
b100111001001111 "
b100110000001001 #
b1001110011111000 $
b1111110000000000 %
b1111110110111010 &
b111 '
b11111101 (
b10111010 )
b1001110 *
b1001111 +
1,
b11111 -
b110111010 .
0/
b10011 0
b1001001111 1
12
b11111 3
b110111010 4
15
b11111 6
b0 7
b1001100 8
b1001 9
b10011100 :
b11111000 ;
