`timescale 1ns / 1ps

module Softmax_Layer_tb;

// Define parameters
localparam WIDTH = 16; // Width of each element in the array
localparam SIZE = 1024; // Size of the array

// Define interface for communication with Softmax_Layer module
interface Softmax_Layer_if;
    logic [WIDTH-1:0] inputData[SIZE]; // Input data
    logic [WIDTH-1:0] outData[SIZE]; // Output data
    logic [WIDTH-1:0] chosenProbability; // Chosen probability

    // Clocking block for synchronization
    clocking cb @(posedge clk);
        input inputData; // Input data signal
        output outData; // Output data signal
        output chosenProbability; // Chosen probability signal
    endclocking
endinterface

// Instantiate interface
Softmax_Layer_if softmax_if();

// Instantiate Softmax_Layer module with interface
Softmax_Layer softmax_layer (
    .inputData(softmax_if.inputData),
    .outData(softmax_if.outData),
    .chosenProbability(softmax_if.chosenProbability)
);

// Clock generation
reg clk = 0; // Clock signal
always #5 clk = ~clk; // Toggle clock every 5 time units

// Stimulus
initial begin
    // Randomized testing
    integer i, j;
    integer max_val, exp_sum;
    real [WIDTH-1:0] exp_arr[SIZE], expected_prob[SIZE];
    
    // Generate random input data array
    for (i = 0; i < SIZE; i = i + 1) begin
        for (j = 0; j < WIDTH; j = j + 1) begin
            softmax_if.cb.inputData[i][j] = $urandom_range(0, (2**WIDTH)-1);
        end
    end

    // Calculate expected probabilities using reference implementation
    for (i = 0; i < SIZE; i = i + 1) begin
        max_val = softmax_if.cb.inputData[i][0];
        for (j = 1; j < WIDTH; j = j + 1) begin
            if (softmax_if.cb.inputData[i][j] > max_val)
                max_val = softmax_if.cb.inputData[i][j];
        end
        exp_sum = 0;
        for (j = 0; j < WIDTH; j = j + 1) begin
            exp_arr[j] = softmax_if.cb.inputData[i][j] - max_val;
            exp_sum = exp_sum + $exp(exp_arr[j]);
        end
        for (j = 0; j < WIDTH; j = j + 1) begin
            expected_prob[j] = $exp(exp_arr[j]) / exp_sum;
        end
    end

    // Apply input data and observe output data
    for (i = 0; i < SIZE; i = i + 1) begin
        softmax_if.cb.inputData[i] <= softmax_if.cb.inputData[i];
        #1;
    end

    // Wait for output data to stabilize
    repeat (10) @(posedge clk);

    // Compare output data with expected probabilities
    for (i = 0; i < SIZE; i = i + 1) begin
        for (j = 0; j < WIDTH; j = j + 1) begin
            if (softmax_if.cb.outData[i][j] !== expected_prob[j])
                $display("Mismatch at index %d: Expected: %f, Actual: %f", i, expected_prob[j], softmax_if.cb.outData[i][j]);
        end
    end

    // Terminate simulation
    $finish;
end

endmodule
